name: Publish NovelRT Draft (Latest)

on:
  push:
    branches:
      - "main"

jobs:
  build-release:
    name: ${{ matrix.name }} - ${{ matrix.configuration }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
        os: [windows-2019, ubuntu-20.04, macos-11]
        vulkanVersion: [1.3.231.1]
        include:
        - os: ubuntu-20.04
          container: novelrt/novelrt-build:latest
          name: Ubuntu 20.04 - Clang 10
          c: CC=clang-10
          cxx: CXX=clang++-10
        - os: windows-2019
          name: Windows - Visual Studio 2019
        - os: macos-11
          name: macOS 11 - AppleClang 13

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Cache Vulkan SDK (macOS)
        if: "contains(matrix.os, 'macos')"
        id: cache-vulkan-macOS
        uses: actions/cache@v3
        with:
          path: $GITHUB_WORKSPACE/VulkanSDK
          key: ${{ runner.os }}-vulkansdk-${{ matrix.vulkanVersion }}-${{ hashFiles('**/mvk_vulkan.h') }}
          restore-keys: |
            ${{ runner.os }}-vulkansdk-${{ matrix.vulkanVersion}}-

      - name: Install Vulkan SDK (macOS)
        if: "contains(matrix.os, 'macos') && steps.cache-vulkan-macOS.outputs.cache-hit != 'true'"
        id: install-vulkan-macOS
        run: scripts/ci-apple-installVulkanSDK.sh ${{ matrix.vulkanVersion }} $GITHUB_WORKSPACE/VulkanSDK

      - name: Install Vulkan SDK (Windows)
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        if: "contains(matrix.os, 'windows')"
        with:
          vulkan-query-version: ${{ matrix.vulkanVersion }}
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Restore Vulkan SDK Env. Variable (macOS)
        if: "contains(matrix.os, 'macos') && steps.cache-vulkan-macOS.outputs.cache-hit == 'true'"
        run: echo "VULKAN_SDK=$GITHUB_WORKSPACE/VulkanSDK/${{ matrix.vulkanVersion }}/macOS" >> $GITHUB_ENV

      - uses: novelrt/setup-cpp@v1
      - name: Build NovelRT - ${{ matrix.configuration }}
        id: build
        run: |
          ${{ matrix.c }} ${{ matrix.cxx }} ${{ matrix.vulkan }} cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }}
          cmake --build build --config ${{ matrix.configuration }} --target Engine Interop -j

            - name: Install NovelRT - ${{ matrix.configuration }}
        run: cmake --install build --config "${{ matrix.configuration }}" --prefix package

      - name: Copy PDBs and Licence (Windows)
        run: |
          Get-ChildItem build/src/NovelRT/RelWithDebInfo -Filter *.pdb | Copy-Item -Destination build/package/lib -Force -PassThru
          Get-ChildItem build/src/NovelRT.Interop/RelWithDebInfo -Filter *.pdb | Copy-Item -Destination build/package/lib -Force -PassThru
          Get-ChildItem . -Filter LICENCE-DIST.md | Copy-Item -Destination build/package/bin/LICENCE.md -Force -PassThru
        if: "contains(matrix.os, 'windows')"

      - name: Copy Licence (macOS)
        run: |
          cp -v -f ./LICENCE-DIST.md build/package/lib/LICENCE.md
        if: "contains(matrix.os, 'macos')"

      - name: Copy Licence (Ubuntu)
        run: cp -v -f ./LICENCE-DIST.md build/package/lib/LICENCE.md
        if: "contains(matrix.os, 'ubuntu')"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: novelrt-${{ matrix.os }}-${{ matrix.configuration }}
          path: build/package

  merge-releases:
    needs: [ build-release ]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        os: [ windows-2019, ubuntu-20.04, macos-11]
        include:
        - os: windows-2019
          name: Windows
        - os: ubuntu-20.04
          name: Ubuntu
        - os: macos-11
          name: macOS

    outputs:
      date: ${{ steps.date.outputs.date }}

    steps:
    - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d-%H%M%S')"

    - uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Merge build artifacts
      run: |
        mkdir merged
        for artifact in $(find ./artifacts/ -type d -name "novelrt-${{ matrix.os }}-*"); do
            cp -RT "$artifact" merged/
        done

    - name: Upload merged artifacts
      uses: actions/upload-artifact@v3
      with:
        name: NovelRT-${{ matrix.os }}
        path: merged

    - uses: actions/download-artifact@v3
      with:
        name: NovelRT-${{ matrix.os }}

    - name: Create release artifact
      run: |
        cd merged
        zip -r "../NovelRT-${{ steps.date.outputs.date }}-${{ matrix.name }}.zip" .
        cd ..

    - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: NovelRT-${{ steps.date.outputs.date }}
          path: NovelRT-${{ steps.date.outputs.date }}-${{ matrix.name }}.zip

  publish-release:
    name: "Publish Draft"
    needs: [ merge-releases ]
    runs-on: ubuntu-20.04
    steps:

    - name: Download merged artifacts
      uses: actions/download-artifact@v3
      with:
        name: NovelRT-${{ needs.merge-releases.outputs.date }}

    - name: Publish release (latest build)
      uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "NovelRT Draft - ${{ needs.merge-releases.outputs.date }}"
          files: |
            NovelRT-${{ needs.merge-releases.outputs.date }}-Windows.zip
            NovelRT-${{ needs.merge-releases.outputs.date }}-Ubuntu.zip
            NovelRT-${{ needs.merge-releases.outputs.date }}-macOS.zip
