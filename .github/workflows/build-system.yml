name: Continuous Integration v2

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  pull_request:

jobs:
  CI:
    name: ${{ matrix.name }} - ${{ matrix.configuration }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    strategy:
      fail-fast: false
      matrix:
        configuration: [RelWithDebInfo, Release]
        os: [windows-latest, windows-2019, ubuntu-latest, macos-11]
        include:
        - os: ubuntu-latest
          container: novelrt/novelrt-build:latest
          name: Ubuntu - Clang 10
          c: CC=clang-10
          cxx: CXX=clang++-10
        - os: windows-2019
          name: Windows - Visual Studio 2019
        - os: windows-latest
          name: Windows - Visual Studio 2022
        - os: macos-11
          name: macOS 11 - Apple-Clang 13
          configuration: Debug
        - os: macos-11
          name: macOS 11 - Apple-Clang 13
        exclude:
        - os: macos-11
          configuration: RelWithDebInfo

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Vulkan SDK (Linux / macOS)
        uses: humbletim/install-vulkan-sdk@v1.1.1
        if: "!contains(matrix.os, 'windows')"
        with:
          version: 1.3.211.0
          cache: true

      - name: Install Vulkan SDK (Windows)
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        if: "contains(matrix.os, 'windows')"
        with:
          vulkan-query-version: 1.3.211.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - uses: novelrt/setup-cpp@v1
      - name: Build NovelRT - ${{ matrix.configuration }}
        id: build
        run: |
          ${{ matrix.c }} ${{ matrix.cxx }} cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.configuration }}
          cmake --build build --config ${{ matrix.configuration }} --target compiler Engine Interop Samples

      - name: Test NovelRT - ${{ matrix.configuration }}
        if: steps.build.outcome == 'success'
        id: test
        run: |
          cmake --build build --config ${{ matrix.configuration }} --target Engine_Tests
          cd build/tests/NovelRT.Tests
          ctest --output-on-failure -C ${{ matrix.configuration }}

  Formatting:
    name: clang-format
    runs-on: ubuntu-latest
    if: "!contains(github.ref, 'main')"

    steps:
      - name: Checkout Code
        id: checkout
        uses: actions/checkout@v2

      - name: Check Formatting
        id: formatting
        uses: DoozyX/clang-format-lint-action@v0.13
        with:
          source: 'src tests include samples'
          exclude: 'include/jsoncons include/jsoncons_ext'
          extensions: 'h,cpp,c,hpp'
          clangFormatVersion: 10
          inplace: True
          style: file

      - name: Confirm Results
        id: results
        run: scripts/ci-checkdiff.sh

      - name: Upload Patch
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: clang-format-patch
          path: artifacts/clang-format.patch
